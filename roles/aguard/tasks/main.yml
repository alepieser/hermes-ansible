# AdGuard Home installation and configuration
# Generated by Ansible - DO NOT EDIT MANUALLY

- name: Create AdGuard Home group
  ansible.builtin.group:
    name: "{{ adguard_group }}"
    system: true
    state: present

- name: Create AdGuard Home user
  ansible.builtin.user:
    name: "{{ adguard_user }}"
    group: "{{ adguard_group }}"
    system: true
    shell: /bin/false
    home: "{{ adguard_install_dir }}"
    create_home: false
    state: present

- name: Create AdGuard Home directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ adguard_user }}"
    group: "{{ adguard_group }}"
    mode: '0755'
  loop:
    - "{{ adguard_install_dir }}"
    - "{{ adguard_config_dir }}"
    - "{{ adguard_work_dir }}"
    - "{{ adguard_data_dir }}"
    - "{{ adguard_log_dir }}"

- name: Check if AdGuard Home is already installed
  ansible.builtin.command: "{{ adguard_install_dir }}/AdGuardHome --version"
  register: adguard_current_version
  failed_when: false
  changed_when: false
  when: adguard_install_dir is defined

- name: Set fact for AdGuard Home installation needed
  ansible.builtin.set_fact:
    adguard_install_needed: "{{ adguard_current_version.rc != 0 or adguard_version not in adguard_current_version.stdout }}"

- name: Display AdGuard Home version information
  ansible.builtin.debug:
    msg: |
      AdGuard Home Version Check:
      - Current version: {{ adguard_current_version.stdout | default('Not installed') }}
      - Target version: {{ adguard_version }}
      - Installation needed: {{ adguard_install_needed | default(true) }}

- name: Download AdGuard Home binary (ARM64 - Raspberry Pi 4)
  ansible.builtin.get_url:
    url: "https://github.com/AdguardTeam/AdGuardHome/releases/download/{{ adguard_version }}/AdGuardHome_linux_arm64.tar.gz"
    dest: "/tmp/AdGuardHome_linux_arm64.tar.gz"
    mode: '0644'
    owner: root
    group: root
  when: adguard_install_needed | default(true)

- name: Extract AdGuard Home binary (ARM64 - Raspberry Pi 4)
  ansible.builtin.unarchive:
    src: "/tmp/AdGuardHome_linux_arm64.tar.gz"
    dest: "/tmp/"
    remote_src: true
    owner: root
    group: root
    mode: '0755'
  when: adguard_install_needed | default(true)

- name: Install AdGuard Home binary
  ansible.builtin.copy:
    src: "/tmp/AdGuardHome/AdGuardHome"
    dest: "{{ adguard_install_dir }}/AdGuardHome"
    owner: "{{ adguard_user }}"
    group: "{{ adguard_group }}"
    mode: '0755'
    remote_src: true
  when: adguard_install_needed | default(true)
  notify: Restart adguard-home

- name: Create AdGuard Home systemd service
  ansible.builtin.template:
    src: adguard-home.service.j2
    dest: /etc/systemd/system/adguard-home.service
    owner: root
    group: root
    mode: '0644'
  notify: Restart adguard-home

- name: Create AdGuard Home configuration
  ansible.builtin.template:
    src: AdGuardHome.yaml.j2
    dest: "{{ adguard_config_dir }}/AdGuardHome.yaml"
    owner: "{{ adguard_user }}"
    group: "{{ adguard_group }}"
    mode: '0644'
  notify: Restart adguard-home

- name: Enable and start AdGuard Home service
  ansible.builtin.systemd:
    name: adguard-home
    enabled: true
    state: started
    daemon_reload: true

- name: Wait for AdGuard Home to be ready
  ansible.builtin.wait_for:
    port: "{{ adguard_bind_port }}"
    host: "{{ adguard_bind_host }}"
    delay: 5
    timeout: 60

- name: Configure firewall for AdGuard Home
  community.general.ufw:
    rule: allow
    port: "{{ adguard_bind_port }}"
    proto: tcp
    comment: "AdGuard Home Web Interface"

- name: Configure firewall for AdGuard Home DNS
  community.general.ufw:
    rule: allow
    port: "{{ adguard_dns_bind_port }}"
    proto: udp
    comment: "AdGuard Home DNS"

- name: Configure firewall for AdGuard Home DNS TCP
  community.general.ufw:
    rule: allow
    port: "{{ adguard_dns_bind_port }}"
    proto: tcp
    comment: "AdGuard Home DNS TCP"

- name: Clean up temporary files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "/tmp/AdGuardHome_linux_arm64.tar.gz"
    - "/tmp/AdGuardHome"
  when: adguard_install_needed | default(true)

# Configure systemd-resolved to use AdGuard Home
- name: Create systemd-resolved configuration directory
  ansible.builtin.file:
    path: /etc/systemd/resolved.conf.d
    state: directory
    owner: root
    group: root
    mode: '0755'
  when: adguard_configure_resolved | default(true)

- name: Configure systemd-resolved for AdGuard Home
  ansible.builtin.template:
    src: resolved.conf.j2
    dest: /etc/systemd/resolved.conf.d/adguard-home.conf
    owner: root
    group: root
    mode: '0644'
    backup: true
  when: adguard_configure_resolved | default(true)
  notify: Restart systemd-resolved

- name: Ensure systemd-resolved service is enabled and started
  ansible.builtin.systemd:
    name: systemd-resolved
    enabled: true
    state: started
    daemon_reload: true
  when: adguard_configure_resolved | default(true)

# Configure NetworkManager to use AdGuard Home (alternative to systemd-resolved)
- name: Configure NetworkManager DNS settings
  ansible.builtin.lineinfile:
    path: /etc/NetworkManager/NetworkManager.conf
    regexp: '^dns='
    line: 'dns=127.0.0.1'
    backup: true
  when: not adguard_configure_resolved | default(true)
  notify: Restart NetworkManager

- name: Ensure NetworkManager DNS configuration is in main section
  ansible.builtin.lineinfile:
    path: /etc/NetworkManager/NetworkManager.conf
    regexp: '^\[main\]'
    line: '[main]'
    insertafter: '^\[main\]'
  when: not adguard_configure_resolved | default(true)

- name: Get NetworkManager connection name
  ansible.builtin.shell: |
    set -o pipefail
    nmcli -t -f NAME connection show --active | head -1
  args:
    executable: /bin/bash
  register: nm_connection_name
  when: not adguard_configure_resolved | default(true)
  changed_when: false

- name: Configure NetworkManager connection DNS
  ansible.builtin.shell: |
    nmcli connection modify "{{ nm_connection_name.stdout }}" ipv4.dns "127.0.0.1"
    nmcli connection up "{{ nm_connection_name.stdout }}"
  args:
    executable: /bin/bash
  when:
    - not adguard_configure_resolved | default(true)
    - nm_connection_name.stdout is defined
    - nm_connection_name.stdout != ""
  register: nm_connection_result
  changed_when: "'Connection successfully activated' in nm_connection_result.stdout"
