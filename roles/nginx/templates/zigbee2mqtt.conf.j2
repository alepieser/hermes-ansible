# Zigbee2MQTT reverse proxy configuration with SSL
server {
    listen 80;
    server_name {{ proxy.subdomain }}.{{ letsencrypt_domain }};
    
    # Let's Encrypt challenge location
    location /.well-known/acme-challenge/ {
        root {{ certbot_webroot_dir }};
        try_files $uri =404;
    }
    
    # Redirect HTTP to HTTPS (only if SSL certificate exists)
    location / {
        # Check if SSL certificate exists
        if (-f {{ certbot_config_dir }}/live/{{ letsencrypt_domain }}/fullchain.pem) {
            return 301 https://$server_name$request_uri;
        }
        # If no SSL certificate, proxy to backend (for initial setup)
        proxy_pass http://{{ proxy.host }}:{{ proxy.port }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

server {
    listen      443 ssl http2;
    listen      [::]:443 ssl http2;

    ssl_certificate     {{ certbot_config_dir }}/live/{{ letsencrypt_domain }}/fullchain.pem;
    ssl_certificate_key {{ certbot_config_dir }}/live/{{ letsencrypt_domain }}/privkey.pem;

    server_name {{ proxy.subdomain }}.{{ letsencrypt_domain }};

    location / {
        proxy_pass http://{{ proxy.host }}:{{ proxy.port }}/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /api {
        proxy_pass         http://{{ proxy.host }}:{{ proxy.port }}/api;
        proxy_set_header Host $host;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}
